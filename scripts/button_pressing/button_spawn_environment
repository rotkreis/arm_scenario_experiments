#!/usr/bin/env python
"""This scripts spawns a button a can optionally define the consequences of pushing it.

The structure of this files is the one of the example provided with the arm_scenario_simulator ( https://bitbucket.org/u2isir/arm_scenario_simulator/src -> scripts -> spawn_objects_example )
"""

import rospy
from geometry_msgs.msg import Point
from std_msgs.msg import Empty
import arm_scenario_simulator as arm_sim


class Environment:
    def __init__(self):
        self.objects = {}
        rospy.Subscriber('/environment/reset', Empty, self.reset_callback, queue_size=1)

    def reset_callback(self, message):
        self.del_objects()
        self.init()

    def del_objects(self):
        for obj in self.objects.keys():
            self.objects[obj].delete()

    def add_object(self, obj):
        if obj: self.objects[obj.gazebo_name] = obj

    def init(self):
        """ Create handles to (and spawn) simulated object in Gazebo"""
        self.objects = {}
        self.add_object(arm_sim.Button('button1').spawn(Point(x=0.6, y=0.35, z=0.78)))
        self.add_object(arm_sim.Light('light_table0', color=[255, 0, 255]))

        # to let the publishers notify the master, so that the following commands are not discarded
        rospy.sleep(1)
        # Initialize objects attributes (color) and lights states
        self.objects['light_table0'].set_light_state(on=False,
                                                     force=True)  # force=True ensures sending a ros message to gazebo to set the gazebo_object's color, no matter what the current python object state is

    def run(self):
        rate = rospy.Rate(100)
        while not rospy.is_shutdown():
            try:
                self.rules()
            except KeyError:
                pass  # When deleting models, key errors may occur
            rate.sleep()

    def rules(self):
        objects = self.objects
        # !!! Uncomment the folowing line to enable the effect of pushing the button !!!
        # objects['light_table0'].set_light_state(objects['button1'].is_pressed())


def main():
    rospy.init_node("babbling_env")
    env = Environment()
    try:
        env.init()
        rospy.on_shutdown(env.del_objects)
        print("Running. Ctrl-c to quit")
        env.run()
    except Exception:
        env.del_objects()
        raise


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
